class Solution {
    public int climbStairs(int n) {
    int[] d=new int[n+1];
    d[0]=1;
    d[1]=1;
    for(int i=2;i<=n;i++){
        d[i]=d[i-1]+d[i-2];
    }
    return d[n];
    }
}

/*
题目描述：假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
示例 1：
输入：n = 2
输出：2
解释：有两种方法可以爬到楼顶。
1. 1 阶 + 1 阶
2. 2 阶
示例 2：
输入：n = 3
输出：3
解释：有三种方法可以爬到楼顶。
1. 1 阶 + 1 阶 + 1 阶
2. 1 阶 + 2 阶
3. 2 阶 + 1 阶

思路：爬上n-1阶楼梯的方法数量 在爬1阶就能到第n阶 爬上n-2阶楼梯的数量 在爬2阶就能到第n阶，就是到最后两步你可能走一步也可能走两步，对应了两种方案，求和
*/
